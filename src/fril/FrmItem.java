/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fril;

import java.awt.Image;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.MalformedURLException;
import java.net.URL;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

/**
 *
 * @author Admin
 */
public class FrmItem extends javax.swing.JFrame {
    private String itemID;
    private String[] imgPaths;
    private String[] imgLinks;
    private List<String> lstIDImg2Delete;
    private ListItems.EditInfo editInfo = null;
    List<AddNewItem.Sizes> lstSize;
    List<AddNewItem.Category> lstCategory;
    List<AddNewItem.CmbItem> lstCmbItemChild2;
    List<AddNewItem.CmbItem> lstStateOfComodity;
    List<AddNewItem.CmbItem> lstShippingChangeOfBuden;
    List<AddNewItem.CmbItem> lstShippingMethod;
    List<AddNewItem.CmbItem> lstEstimatedShippingTime;
    List<AddNewItem.CmbItem> lstShippingPlace;
    List<AddNewItem.CmbItem> lstPurchaseApplication;
    List<AddNewItem.CmbItem> lstCmbSize;
    /**
     * Creates new form FrmItem
     * @param id
     * @throws java.io.IOException
     */
//    public FrmItem() throws IOException {
//        
//    }

    public FrmItem(String id) throws IOException {
        itemID = id;
        initComponents();
        lstSize = getSizes();
        initializeComboboxes();    
   
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        tfBrand = new javax.swing.JTextField();
        jButton10 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        btnDelete2 = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        cmbStateOfComodity = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        btnEdit3 = new javax.swing.JButton();
        cmbSize = new javax.swing.JComboBox<>();
        lbPicture1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        tfProductName = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        taProductDescription = new javax.swing.JTextArea();
        btnDelete3 = new javax.swing.JButton();
        cmbCategories = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        lbPicture2 = new javax.swing.JLabel();
        btnEdit4 = new javax.swing.JButton();
        lbPicture3 = new javax.swing.JLabel();
        cmbShippingPlace = new javax.swing.JComboBox<>();
        jLabel21 = new javax.swing.JLabel();
        lbPicture4 = new javax.swing.JLabel();
        btnDelete4 = new javax.swing.JButton();
        jSpinner1 = new javax.swing.JSpinner();
        cmbEstimatedDateOfShipment = new javax.swing.JComboBox<>();
        cmbCategoryChild = new javax.swing.JComboBox<>();
        tfProductPrize = new javax.swing.JTextField();
        cmbShippingMethod = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        btnEdit1 = new javax.swing.JButton();
        cmbShippingChangeOfBuden = new javax.swing.JComboBox<>();
        jLabel3 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btnDelete1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        cmbPurchaseApplication = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        btnOk = new javax.swing.JButton();
        btnEdit2 = new javax.swing.JButton();
        cmbCategoryChild2 = new javax.swing.JComboBox<>();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel18.setText("Brand");

        tfBrand.setText("指定なし");

        jButton10.setText("Cancel");

        jLabel13.setText("Product Details");

        btnDelete2.setText("Delete");
        btnDelete2.setActionCommand("image2");
        btnDelete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete_Clicked(evt);
            }
        });

        jLabel10.setText("Merchandise Information");

        jLabel14.setText("Product Images");

        cmbStateOfComodity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbStateOfComodityActionPerformed(evt);
            }
        });

        jLabel6.setText("Shipping Method");

        jLabelName.setText("Product Name (*)");

        btnEdit3.setText("Edit");
        btnEdit3.setActionCommand("image3");
        btnEdit3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit3ActionPerformed(evt);
            }
        });

        cmbSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSizeActionPerformed(evt);
            }
        });

        lbPicture1.setText("Picture 1");
        lbPicture1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture1.setName("image1"); // NOI18N
        lbPicture1.setVerifyInputWhenFocusTarget(false);
        lbPicture1.addAncestorListener(new javax.swing.event.AncestorListener() {
            public void ancestorMoved(javax.swing.event.AncestorEvent evt) {
            }
            public void ancestorAdded(javax.swing.event.AncestorEvent evt) {
                lbPicture1AncestorAdded(evt);
            }
            public void ancestorRemoved(javax.swing.event.AncestorEvent evt) {
            }
        });
        lbPicture1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture1MouseClicked(evt);
            }
        });

        jLabel7.setText("Shipping change of Buden (*)");

        taProductDescription.setColumns(20);
        taProductDescription.setRows(5);
        jScrollPane1.setViewportView(taProductDescription);

        btnDelete3.setText("Delete");
        btnDelete3.setActionCommand("image3");
        btnDelete3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete_Clicked(evt);
            }
        });

        cmbCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategorySelected(evt);
            }
        });

        jLabel8.setText("Shipping information");

        jLabel20.setText("Product Description (*)");

        lbPicture2.setText("Picture 2");
        lbPicture2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture2.setName("image2"); // NOI18N
        lbPicture2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture2MouseClicked(evt);
            }
        });

        btnEdit4.setText("Edit");
        btnEdit4.setActionCommand("image4");
        btnEdit4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit4ActionPerformed(evt);
            }
        });

        lbPicture3.setText("Picture 3");
        lbPicture3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture3.setName("image3"); // NOI18N
        lbPicture3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture3MouseClicked(evt);
            }
        });

        jLabel21.setText("Product Prize (*)");

        lbPicture4.setText("Picture 4");
        lbPicture4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture4.setName("image4"); // NOI18N
        lbPicture4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture4MouseClicked(evt);
            }
        });

        btnDelete4.setText("Delete");
        btnDelete4.setActionCommand("image3");
        btnDelete4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete_Clicked(evt);
            }
        });

        jSpinner1.setModel(new javax.swing.SpinnerDateModel());

        cmbCategoryChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryChildSelected(evt);
            }
        });

        jLabel2.setText("Account");

        btnEdit1.setText("Edit");
        btnEdit1.setActionCommand("image1");
        btnEdit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Purchase Aplication");

        jLabel1.setText("Purchase Application");

        btnDelete1.setText("Delete");
        btnDelete1.setActionCommand("image1");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete_Clicked(evt);
            }
        });

        jLabel9.setText("State of Comodity (*)");

        jLabel4.setText("Shipping Place (*)");

        cmbPurchaseApplication.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbPurchaseApplicationActionPerformed(evt);
            }
        });

        jLabel5.setText("Estimate Date of Shipment (*)");

        jLabel11.setText("Size (*)");

        jLabel22.setText("円");

        jLabel12.setText("Category (*)");

        btnOk.setText("OK");

        btnEdit2.setText("Edit");
        btnEdit2.setActionCommand("image2");
        btnEdit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit2ActionPerformed(evt);
            }
        });

        cmbCategoryChild2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryChild2Selected(evt);
            }
        });

        jLabel15.setText("Schedule");

        jLabel16.setText("Repeat period");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(224, 224, 224)
                                .addComponent(lbPicture2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnEdit1, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel4)
                            .addComponent(jLabel18)
                            .addComponent(jLabel11)
                            .addComponent(jLabel9)
                            .addComponent(jLabel12))
                        .addGap(42, 42, 42)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(tfBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(cmbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, 182, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCategoryChild, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbCategoryChild2, 0, 176, Short.MAX_VALUE))
                            .addComponent(cmbPurchaseApplication, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbShippingPlace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEstimatedDateOfShipment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbShippingMethod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbShippingChangeOfBuden, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStateOfComodity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbSize, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(btnDelete1)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbPicture1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel14)))
                            .addComponent(jLabelName)
                            .addComponent(jLabel20)
                            .addComponent(jLabel21)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(512, 512, 512)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lbPicture4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnEdit3, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(btnDelete3))
                                            .addComponent(lbPicture3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(73, 73, 73))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(74, 74, 74)
                                        .addComponent(btnEdit2, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(btnDelete2)
                                        .addGap(284, 284, 284)))
                                .addComponent(btnEdit4, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnDelete4, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(62, 62, 62)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(tfProductPrize, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel22))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(tfProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 554, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(jSpinner1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 261, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnOk, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jButton10, javax.swing.GroupLayout.PREFERRED_SIZE, 287, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                .addContainerGap(234, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel8)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(21, 21, 21)
                        .addComponent(jLabel1))
                    .addComponent(jLabel3)
                    .addComponent(jLabel10))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2)
                        .addGap(38, 38, 38))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel14)
                        .addGap(18, 18, 18)))
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lbPicture1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit1)
                    .addComponent(btnDelete1)
                    .addComponent(btnEdit2)
                    .addComponent(btnDelete2)
                    .addComponent(btnDelete3)
                    .addComponent(btnEdit3)
                    .addComponent(btnDelete4)
                    .addComponent(btnEdit4))
                .addGap(18, 50, Short.MAX_VALUE)
                .addComponent(jLabel13)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cmbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoryChild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoryChild2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(cmbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel18)
                    .addComponent(tfBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(cmbStateOfComodity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbShippingChangeOfBuden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbShippingMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbEstimatedDateOfShipment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbShippingPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbPurchaseApplication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabelName)
                            .addComponent(tfProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addComponent(jLabel20))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(tfProductPrize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel16)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOk)
                    .addComponent(jButton10)))
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 568, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cmbStateOfComodityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbStateOfComodityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbStateOfComodityActionPerformed

    private void cmbSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSizeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbSizeActionPerformed

    private void cmbPurchaseApplicationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbPurchaseApplicationActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbPurchaseApplicationActionPerformed

    private void categoryChildSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryChildSelected
        // TODO add your handling code here:
        if (lstCategory != null) {
            int selectedIndex = cmbCategories.getSelectedIndex();
            int childSelectedIndex = cmbCategoryChild.getSelectedIndex();
            if (selectedIndex >= 0 && childSelectedIndex >= 0) {
                cmbCategoryChild2.removeAllItems();
                lstCmbItemChild2 = new ArrayList<>();
                for (AddNewItem.Child2 categoryChild2 : lstCategory.get(selectedIndex).children.get(childSelectedIndex).children) {
                    lstCmbItemChild2.add(new AddNewItem.CmbItem(categoryChild2.name, "" + categoryChild2.id));
                }
                for (AddNewItem.CmbItem item : lstCmbItemChild2) {
                    cmbCategoryChild2.addItem(item.getText());
                }
            }
        }
    }//GEN-LAST:event_categoryChildSelected

    private void btnEdit1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit1ActionPerformed
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit1ActionPerformed

    private void btnDelete_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete_Clicked
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        lstIDImg2Delete = new ArrayList<>();
        for (int i = 0; i < 4; i++) {
            if (evt.getActionCommand().equals(label[i].getName())) {
                String strImageID = getImageID(imgLinks[i]);
                if (strImageID != null) {
                    lstIDImg2Delete.add(strImageID);
                    label[i].setIcon(null);
                    imgLinks[i] = null;
                    imgPaths[i] = null;
                }
            }
        }
    }//GEN-LAST:event_btnDelete_Clicked

    private void lbPicture1AncestorAdded(javax.swing.event.AncestorEvent evt) {//GEN-FIRST:event_lbPicture1AncestorAdded
        // TODO add your handling code here:
    }//GEN-LAST:event_lbPicture1AncestorAdded

    private void lbPicture1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture1MouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[0] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture1.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture1MouseClicked

    private void lbPicture2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture2MouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[1] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture2.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture2MouseClicked

    private void lbPicture3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture3MouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[2] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture3.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture3MouseClicked

    private void lbPicture4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture4MouseClicked
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[3] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture4.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture4MouseClicked

    private void btnEdit2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit2ActionPerformed
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit2ActionPerformed

    private void btnEdit3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit3ActionPerformed
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit3ActionPerformed

    private void btnEdit4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit4ActionPerformed
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(FrmItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit4ActionPerformed

    private void categoryChild2Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryChild2Selected
        // TODO add your handling code here:
        if (lstCategory != null) {
            int selectedIndex = cmbCategories.getSelectedIndex();
            int childSelectedIndex = cmbCategoryChild.getSelectedIndex();
            int child2SelectedIndex = cmbCategoryChild2.getSelectedIndex();
            if (selectedIndex >= 0 && childSelectedIndex >= 0 && child2SelectedIndex >= 0) {
                List<Object> lstSizes = lstCategory.get(selectedIndex).children.get(childSelectedIndex).children.get(child2SelectedIndex).related_size_group_ids;
                cmbSize.removeAllItems();
                if (lstSizes.isEmpty()) {
                    cmbSize.setEnabled(false);
                } else {
                    cmbSize.setEnabled(true);
                    int nIdxSize = -1;
                    nIdxSize = Integer.valueOf(lstSizes.get(0).toString());

                    lstCmbSize = new ArrayList<>();
                    for (AddNewItem.Size size : lstSize.get(nIdxSize - 1).sizes) {
                        lstCmbSize.add(new AddNewItem.CmbItem(size.name, String.valueOf(size.id)));
                    }
                    for (AddNewItem.CmbItem item : lstCmbSize) {
                        cmbSize.addItem(item.getText());
                    }
                }
            }
        }
    }//GEN-LAST:event_categoryChild2Selected

    private void cmbCategorySelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategorySelected
        // TODO add your handling code here:
        if (lstCategory != null) {
            int selectedIndex = cmbCategories.getSelectedIndex();
            if (selectedIndex >= 0) {
                cmbCategoryChild.removeAllItems();
                List<AddNewItem.CmbItem> lstCmbItem = new ArrayList<>();
                for (AddNewItem.Child categoryChild : lstCategory.get(selectedIndex).children) {
                    lstCmbItem.add(new AddNewItem.CmbItem(categoryChild.name, "" + categoryChild.id));
                }
                for (AddNewItem.CmbItem item : lstCmbItem) {
                    cmbCategoryChild.addItem(item.getText());
                }
            }
        }
    }//GEN-LAST:event_cmbCategorySelected

    /**
     * @param args the command line arguments
     */
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnDelete2;
    private javax.swing.JButton btnDelete3;
    private javax.swing.JButton btnDelete4;
    private javax.swing.JButton btnEdit1;
    private javax.swing.JButton btnEdit2;
    private javax.swing.JButton btnEdit3;
    private javax.swing.JButton btnEdit4;
    private javax.swing.JButton btnOk;
    private javax.swing.JComboBox<String> cmbCategories;
    private javax.swing.JComboBox<String> cmbCategoryChild;
    private javax.swing.JComboBox<String> cmbCategoryChild2;
    private javax.swing.JComboBox<String> cmbEstimatedDateOfShipment;
    private javax.swing.JComboBox<String> cmbPurchaseApplication;
    private javax.swing.JComboBox<String> cmbShippingChangeOfBuden;
    private javax.swing.JComboBox<String> cmbShippingMethod;
    private javax.swing.JComboBox<String> cmbShippingPlace;
    private javax.swing.JComboBox<String> cmbSize;
    private javax.swing.JComboBox<String> cmbStateOfComodity;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JLabel lbPicture1;
    private javax.swing.JLabel lbPicture2;
    private javax.swing.JLabel lbPicture3;
    private javax.swing.JLabel lbPicture4;
    private javax.swing.JTextArea taProductDescription;
    private javax.swing.JTextField tfBrand;
    private javax.swing.JTextField tfProductName;
    private javax.swing.JTextField tfProductPrize;
    // End of variables declaration//GEN-END:variables

    private String getImageID(String imgLink) { 
        String strIdImg = "";
        if (imgLink != null && imgLink.contains("/original/")) {
            String strImagePath = Utility.extractAttribute(imgLink, 0, "/original/", ".");
            strIdImg = strImagePath;
        }
        return strIdImg;
    }
    
    private void initializeComboboxes() throws IOException {
        lstCategory = AddNewItem.getCategory();
        if (lstCategory != null) {
            cmbCategories.setSelectedItem("Text");
            List<AddNewItem.CmbItem> lstCmbItem = new ArrayList<>();
            for (int i = 0; i < lstCategory.size(); i++) {
                lstCmbItem.add(new AddNewItem.CmbItem(lstCategory.get(i).name, "" + lstCategory.get(i).id));
            }
            //initialize selections for category combobox
            for (AddNewItem.CmbItem item : lstCmbItem) {
                cmbCategories.addItem(item.toString());
            }
        }
        cmbStateOfComodity.setSelectedItem("Text");
        lstStateOfComodity = new ArrayList<>();
        lstStateOfComodity.add(new AddNewItem.CmbItem("新品, 未使用", "5"));
        lstStateOfComodity.add(new AddNewItem.CmbItem("未使用に近い", "4"));
        lstStateOfComodity.add(new AddNewItem.CmbItem("目立った傷や汚れなし", "6"));
        lstStateOfComodity.add(new AddNewItem.CmbItem("やや傷や汚れあり", "3"));
        lstStateOfComodity.add(new AddNewItem.CmbItem("傷や汚れあり", "2"));
        lstStateOfComodity.add(new AddNewItem.CmbItem("全体的に状態が悪い", "1"));
        for (AddNewItem.CmbItem stateOfComodity : lstStateOfComodity) {
            cmbStateOfComodity.addItem(stateOfComodity.getText());
        }

        //cmb ShippingChangeOfBuden
        lstShippingChangeOfBuden = new ArrayList<>();
        lstShippingChangeOfBuden.add(new AddNewItem.CmbItem("送料込み（出品者が負担)", "1"));
        lstShippingChangeOfBuden.add(new AddNewItem.CmbItem("着払い（購入者が負担)", "2"));
        for (AddNewItem.CmbItem shippingChangeOfBuden : lstShippingChangeOfBuden) {
            cmbShippingChangeOfBuden.addItem(shippingChangeOfBuden.getText());
        }

        //cmb ShippingMethod
        lstShippingMethod = new ArrayList<>();
        lstShippingMethod.add(new AddNewItem.CmbItem("未定", "9"));
        lstShippingMethod.add(new AddNewItem.CmbItem("ゆうパック着払い", "8"));
        lstShippingMethod.add(new AddNewItem.CmbItem("ヤマト宅急便", "6"));
        lstShippingMethod.add(new AddNewItem.CmbItem("ゆうパケット", "17"));
        lstShippingMethod.add(new AddNewItem.CmbItem("ゆうメール着払い", "13"));
        for (AddNewItem.CmbItem shippingMethod : lstShippingMethod) {
            cmbShippingMethod.addItem(shippingMethod.getText());
        }

        //cmb EstimatedShippingTime
        lstEstimatedShippingTime = new ArrayList<>();
        lstEstimatedShippingTime.add(new AddNewItem.CmbItem("支払い後、1～2日で発送", "1"));
        lstEstimatedShippingTime.add(new AddNewItem.CmbItem("支払い後、2～3日で発送", "2"));
        lstEstimatedShippingTime.add(new AddNewItem.CmbItem("支払い後、4～7日で発送", "3"));
        for (AddNewItem.CmbItem estimatedShippingTime : lstEstimatedShippingTime) {
            cmbEstimatedDateOfShipment.addItem(estimatedShippingTime.getText());
        }

        //cmb ShippingPlace
        lstShippingPlace = new ArrayList<>();
        lstShippingPlace.add(new AddNewItem.CmbItem("北海道", "1"));
        lstShippingPlace.add(new AddNewItem.CmbItem("青森県", "2"));
        lstShippingPlace.add(new AddNewItem.CmbItem("岩手県", "3"));
        lstShippingPlace.add(new AddNewItem.CmbItem("宮城県", "4"));
        lstShippingPlace.add(new AddNewItem.CmbItem("秋田県", "5"));
        lstShippingPlace.add(new AddNewItem.CmbItem("山形県", "6"));
        lstShippingPlace.add(new AddNewItem.CmbItem("福島県", "7"));
        lstShippingPlace.add(new AddNewItem.CmbItem("茨城県", "8"));
        lstShippingPlace.add(new AddNewItem.CmbItem("栃木県", "9"));
        lstShippingPlace.add(new AddNewItem.CmbItem("群馬県", "10"));
        lstShippingPlace.add(new AddNewItem.CmbItem("埼玉県", "11"));
        lstShippingPlace.add(new AddNewItem.CmbItem("千葉県", "12"));
        lstShippingPlace.add(new AddNewItem.CmbItem("東京都", "13"));
        lstShippingPlace.add(new AddNewItem.CmbItem("神奈川県", "14"));
        lstShippingPlace.add(new AddNewItem.CmbItem("新潟県", "15"));
        lstShippingPlace.add(new AddNewItem.CmbItem("富山県", "16"));
        lstShippingPlace.add(new AddNewItem.CmbItem("石川県", "17"));
        lstShippingPlace.add(new AddNewItem.CmbItem("福井県", "18"));
        lstShippingPlace.add(new AddNewItem.CmbItem("山梨県", "19"));
        lstShippingPlace.add(new AddNewItem.CmbItem("長野県", "20"));
        lstShippingPlace.add(new AddNewItem.CmbItem("岐阜県", "21"));
        lstShippingPlace.add(new AddNewItem.CmbItem("静岡県", "22"));
        lstShippingPlace.add(new AddNewItem.CmbItem("愛知県", "23"));
        lstShippingPlace.add(new AddNewItem.CmbItem("三重県", "24"));
        lstShippingPlace.add(new AddNewItem.CmbItem("滋賀県", "25"));
        lstShippingPlace.add(new AddNewItem.CmbItem("大阪府", "27"));
        lstShippingPlace.add(new AddNewItem.CmbItem("兵庫県", "28"));
        lstShippingPlace.add(new AddNewItem.CmbItem("奈良県", "29"));
        lstShippingPlace.add(new AddNewItem.CmbItem("和歌山県", "30"));
        lstShippingPlace.add(new AddNewItem.CmbItem("鳥取県", "31"));
        lstShippingPlace.add(new AddNewItem.CmbItem("島根県", "32"));
        lstShippingPlace.add(new AddNewItem.CmbItem("岡山県", "33"));
        lstShippingPlace.add(new AddNewItem.CmbItem("広島県", "34"));
        lstShippingPlace.add(new AddNewItem.CmbItem("山口県", "35"));
        lstShippingPlace.add(new AddNewItem.CmbItem("徳島県", "36"));
        lstShippingPlace.add(new AddNewItem.CmbItem("香川県", "37"));
        lstShippingPlace.add(new AddNewItem.CmbItem("愛媛県", "38"));
        lstShippingPlace.add(new AddNewItem.CmbItem("高知県", "39"));
        lstShippingPlace.add(new AddNewItem.CmbItem("福岡県", "40"));
        lstShippingPlace.add(new AddNewItem.CmbItem("佐賀県", "41"));
        lstShippingPlace.add(new AddNewItem.CmbItem("長崎県", "42"));
        lstShippingPlace.add(new AddNewItem.CmbItem("熊本県", "43"));
        lstShippingPlace.add(new AddNewItem.CmbItem("大分県", "44"));
        lstShippingPlace.add(new AddNewItem.CmbItem("宮崎県", "45"));
        lstShippingPlace.add(new AddNewItem.CmbItem("鹿児島県", "46"));
        lstShippingPlace.add(new AddNewItem.CmbItem("沖縄県", "47"));
        for (AddNewItem.CmbItem shippingPlace : lstShippingPlace) {
            cmbShippingPlace.addItem(shippingPlace.getText());
        }

        //cmb PurchaseApplication
        lstPurchaseApplication = new ArrayList<>();
        lstPurchaseApplication.add(new AddNewItem.CmbItem("なし", "0"));
        lstPurchaseApplication.add(new AddNewItem.CmbItem("あり", "1"));
        for (AddNewItem.CmbItem purchaseApplication : lstPurchaseApplication) {
            cmbPurchaseApplication.addItem(purchaseApplication.getText());
        }
    }  
    
    void SetEditedProductInfo(ListItems.EditInfo editedInfo) {
        this.editInfo = editedInfo;
    }
    
    void loadDataToComboboxes() throws IOException {
        if(editInfo == null){
            loadDataFromDB();
        } else{
            loadDataFromEditInfo();
        }
    }
    
    void loadDataFromEditInfo() throws MalformedURLException, IOException {
        if (editInfo != null) {
            JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
            int index = 0;
            imgLinks = new String[4];
            for (String imgPath : editInfo.imageLinkList) {
                imgLinks[index] = imgPath;
                URL url = new URL(imgPath);
                Image image = ImageIO.read(url);
                ImageIcon imageIcon = new ImageIcon(image);
                label[index++].setIcon(imageIcon);
//                ImageIcon image = new ImageIcon(imgPath);
//                label[index++].setIcon(image);
            }
            String debugString = "";
            //find categoryID
            for (int i = 0; i < lstCategory.size(); i++) {
                if (lstCategory.get(i).id == editInfo.editItemInfo.category_id) {
                    debugString = "category: " + i + " " + lstCategory.get(i).name;
                }
                for (int j = 0; j < lstCategory.get(i).children.size(); j++) {
                    if (lstCategory.get(i).children.get(j).id == editInfo.editItemInfo.category_id) {
                        debugString += " category - child: " + j + " " + lstCategory.get(i).name;
                    }
                    for (int k = 0; k < lstCategory.get(i).children.get(j).children.size(); k++) {
                        if (lstCategory.get(i).children.get(j).children.get(k).id == editInfo.editItemInfo.category_id) {
                            debugString += " category - child2: " + k + " " + lstCategory.get(i).name;
                            cmbCategories.setSelectedIndex(i);
                            cmbCategoryChild.setSelectedIndex(j);
                            cmbCategoryChild2.setSelectedIndex(k);
                            break;
                        }
                    }
                }
            }
            for(int i = 0; i < lstCmbSize.size(); i++){
                if(lstCmbSize.get(i).Value.equals(editInfo.editItemInfo.size_id)){
                    cmbSize.setSelectedIndex(i);
                }
            }
            tfBrand.setText(editInfo.editItemInfo.brand_name);
            for(int i = 0; i < lstStateOfComodity.size(); i++){
                if(Integer.parseInt(lstStateOfComodity.get(i).Value) == (editInfo.editItemInfo.status)){
                    cmbStateOfComodity.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstShippingChangeOfBuden.size(); i++){
                if(Integer.parseInt(lstShippingChangeOfBuden.get(i).Value) == (editInfo.editItemInfo.carriage)){
                    cmbShippingChangeOfBuden.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstShippingMethod.size(); i++){
                if(Integer.parseInt(lstShippingMethod.get(i).Value) == (editInfo.editItemInfo.delivery_method)){
                    cmbShippingMethod.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstShippingPlace.size(); i++){
                if(Integer.parseInt(lstShippingPlace.get(i).Value) == (editInfo.editItemInfo.delivery_area)){
                    cmbShippingPlace.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstEstimatedShippingTime.size(); i++){
                if(Integer.parseInt(lstEstimatedShippingTime.get(i).Value) == (editInfo.editItemInfo.delivery_date)){
                    cmbEstimatedDateOfShipment.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstPurchaseApplication.size(); i++){
                if(lstPurchaseApplication.get(i).Value.equals(editInfo.editItemInfo.request_required)){
                    cmbPurchaseApplication.setSelectedIndex(i);
                }
            }
            cmbPurchaseApplication.setSelectedItem(editInfo.editItemInfo.request_required);
            tfProductName.setText(editInfo.editItemInfo.name);
            taProductDescription.setText(editInfo.editItemInfo.detail);
            tfProductPrize.setText(String.valueOf(editInfo.editItemInfo.sell_price));
        }
    }

    private void loadDataFromDB() {
        //check if item already exists in db then load
        SqliteJDBC sqliteJDBC = new SqliteJDBC();
        ResultSet rs = sqliteJDBC.getItemFromTable(itemID);
        try {
            if(rs.first()){
                //load images
                JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
                String imagePaths = rs.getString("image_paths");
                if(imagePaths != null){
                    String[] strImgLinks = imagePaths.split(",");
                    int index = 0;
                    for(String imgPath : strImgLinks){
                        imgPaths[index] = imgPath;
                        ImageIcon imageIcon = new ImageIcon(imgPath);
                        label[index].setIcon(imageIcon);
                    }
                }
                //find categoryID
                String debugString = "";               
                for (int i = 0; i < lstCategory.size(); i++) {
                    if (lstCategory.get(i).id == rs.getInt("category_id")) {
                        debugString = "category: " + i + " " + lstCategory.get(i).name;
                    }
                    for (int j = 0; j < lstCategory.get(i).children.size(); j++) {
                        if (lstCategory.get(i).children.get(j).id == rs.getInt("category_id")) {
                            debugString += " category - child: " + j + " " + lstCategory.get(i).name;
                        }
                        for (int k = 0; k < lstCategory.get(i).children.get(j).children.size(); k++) {
                            if (lstCategory.get(i).children.get(j).children.get(k).id == rs.getInt("category_id")) {
                                debugString += " category - child2: " + k + " " + lstCategory.get(i).name;
                                cmbCategories.setSelectedIndex(i);
                                cmbCategoryChild.setSelectedIndex(j);
                                cmbCategoryChild2.setSelectedIndex(k);
                                break;
                            }
                        }
                    }
                }
                
                for(int i = 0; i < lstCmbSize.size(); i++){
                    if(lstCmbSize.get(i).Value.equals(rs.getInt("size_id"))){
                        cmbSize.setSelectedIndex(i);
                    }
                }
                tfBrand.setText(rs.getString("brand_name"));
                for(int i = 0; i < lstStateOfComodity.size(); i++){
                    if(Integer.parseInt(lstStateOfComodity.get(i).Value) == (rs.getInt("status"))){
                        cmbStateOfComodity.setSelectedIndex(i);
                    }
                }
                for(int i = 0; i < lstShippingChangeOfBuden.size(); i++){
                    if(Integer.parseInt(lstShippingChangeOfBuden.get(i).Value) == (rs.getInt("carriage"))){
                        cmbShippingChangeOfBuden.setSelectedIndex(i);
                    }
                }
                for(int i = 0; i < lstShippingMethod.size(); i++){
                    if(Integer.parseInt(lstShippingMethod.get(i).Value) == (rs.getInt("delivery_method"))){
                        cmbShippingMethod.setSelectedIndex(i);
                    }
                }
                for(int i = 0; i < lstShippingPlace.size(); i++){
                    if(Integer.parseInt(lstShippingPlace.get(i).Value) == (rs.getInt("delivery_area"))){
                        cmbShippingPlace.setSelectedIndex(i);
                    }
                }
                for(int i = 0; i < lstEstimatedShippingTime.size(); i++){
                    if(Integer.parseInt(lstEstimatedShippingTime.get(i).Value) == (rs.getInt("delivery_date"))){
                        cmbEstimatedDateOfShipment.setSelectedIndex(i);
                    }
                }
                for(int i = 0; i < lstPurchaseApplication.size(); i++){
                    if(lstPurchaseApplication.get(i).Value.equals(rs.getString("request_required"))){
                        cmbPurchaseApplication.setSelectedIndex(i);
                    }
                }
                cmbPurchaseApplication.setSelectedItem(rs.getString("request_required"));
                tfProductName.setText(rs.getString("name"));
                taProductDescription.setText(rs.getString("detail"));
                tfProductPrize.setText(String.valueOf(rs.getInt("sell_price")));
                } else{

                }
        } catch (SQLException ex) {
            Logger.getLogger(FrmItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private List<AddNewItem.Sizes> getSizes() throws MalformedURLException, IOException {
        List<ItemShortInfo> lstItem = new ArrayList<>();
        String frmUrl = "https://fril.jp/ajax/size";
        URL url = new URL(frmUrl);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("GET");
        req.setRequestProperty("Content-Type", "text/javascript; charset=utf-8");
        req.setRequestProperty("X-Requested-With", "XMLHttpRequest");

        String fullPage;
        String inputLine;
        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        fullPage = stringBuilder.toString();
        ObjectMapper mapper = new ObjectMapper();
        List<AddNewItem.Sizes> lstSizes = mapper.readValue(fullPage, new TypeReference<List<AddNewItem.Sizes>>() {
        });
        //the other way to create get mapper.readValue();
        //List<Sizes> lstSizes = Arrays.asList(mapper.readValue(fullPage, Sizes.class)); 
        return lstSizes;
    }


}
