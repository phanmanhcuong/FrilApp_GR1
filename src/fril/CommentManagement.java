/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fril;

import static fril.Utility.cookieID;
import static fril.Utility.getTokenToUploadComment;
import java.awt.Button;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.Timer;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.BadLocationException;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLEditorKit;

/**
 *
 * @author CuongPhan
 */
public class CommentManagement extends javax.swing.JFrame {

    /**
     * Creates new form CommentManagement
     */
//    public CommentManagement() {
//        initComponents();
//    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPaneTable = new javax.swing.JScrollPane();
        jTable_comments = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtComment = new javax.swing.JTextArea();
        btnComment = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel2.setText("Picture box");
        jLabel2.setPreferredSize(new java.awt.Dimension(1055, 125));

        jScrollPaneTable.setPreferredSize(new java.awt.Dimension(1055, 450));
        jScrollPaneTable.setViewportView(jTable_comments);

        txtComment.setColumns(20);
        txtComment.setRows(5);
        jScrollPane2.setViewportView(txtComment);

        btnComment.setText("jButton1");
        btnComment.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnCommentMouseClicked(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 900, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnComment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPaneTable, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 826, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPaneTable, javax.swing.GroupLayout.PREFERRED_SIZE, 450, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)
                    .addComponent(btnComment, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(40, Short.MAX_VALUE))
        );

        jScrollPane2.getAccessibleContext().setAccessibleName("");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCommentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnCommentMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnCommentMouseClicked

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnComment;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPaneTable;
    private javax.swing.JTable jTable_comments;
    private javax.swing.JTextArea txtComment;
    // End of variables declaration//GEN-END:variables

    String m_StrLink = "";
    String itemWebID = "";
    int commentID = 0;
    String strComment = "";
    Timer myTimer = null;

    public CommentManagement(String strLink) {
        m_StrLink = strLink;
        String[] strTmp = strLink.split("/");
        itemWebID = strTmp[strTmp.length - 1];

        initComponents();

        ActionListener refreshCommentListView = new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                myTimerTick();
            }
        };
        Timer myTimer = new Timer(Utility.g_refreshPeriod, refreshCommentListView);

        Button btnReply = new Button();
        DefaultTableModel defaultTableModelComments = new DefaultTableModel(new Object[]{"Date", "Message Content", "User ID", "Date Reply",
            "Message Reply", "Comment ID", btnReply}, 0);
        //TODO set column Comment ID invisible
        jTable_comments.setModel(defaultTableModelComments);
        jTable_comments.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent e) {
                int selectedColumn = jTable_comments.getSelectedColumn();
                int selectedRow = jTable_comments.getSelectedRow();
                if (selectedColumn == 6){
                    strComment = "@" + jTable_comments.getValueAt(selectedRow, 2).toString() + ":\n"; //getValueAt(selectedRow, 2) cell User ID
                    commentID = Integer.valueOf(jTable_comments.getValueAt(selectedRow, 5).toString()); //getValueAt(selectedRow, 5) cell Comment ID
                    txtComment.setFocusable(true);
                }
            }
        });
        
        refreshCommentLstView();
    }

    void myTimerTick() {
        refreshCommentLstView();
    }

    private static void refreshCommentLstView() {
        try {
            List<CommentElement> itemLst = getCommentLst();
            //TODO
        } catch (IOException ex) {
            Logger.getLogger(CommentManagement.class.getName()).log(Level.SEVERE, null, ex);
        } catch (BadLocationException ex) {
            Logger.getLogger(CommentManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    //TODO
    private static List<CommentElement> getCommentLst() throws IOException, BadLocationException {
        List<CommentElement> lstComment = new ArrayList<CommentElement>();
        //TODO
//        String fullPage = getCommentFullPage(m_StrLink);
// 
//        HTMLDocument doc = new HTMLDocument();
//        doc.insertString(0, fullPage, null);
//        HTML
        return lstComment;
    }

    private String getCommentFullPage(String strLink) throws MalformedURLException, IOException {
        String[] strTmp = strLink.split("/");
        String strLink2 = "https://item.fril.jp/" + strTmp[strTmp.length - 1];
        String fullPage = "";

        URL url = new URL(strLink2);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("GET");
        req.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        req.setRequestProperty("Cookie", Utility.gCookieID);
        req.setRequestProperty("Referer", "https://fril.jp/sell");

        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        String inputLine;
        StringBuilder stringBuilder = new StringBuilder();
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        fullPage = stringBuilder.toString();
        return fullPage;
    }

    private void uploadCommentToServer() throws UnsupportedEncodingException, IOException {
        String[] strTmp = m_StrLink.split("/");
        String strLink2 = "https://item.fril.jp/item/" + strTmp[strTmp.length - 1] + "/comment";
        String strLink3 = "https://item.fril.jp/" + strTmp[strTmp.length - 1];

        Utility.getTokenToUploadComment(strLink3);

        strComment += txtComment.getText();
        String formParams = "utf8=" + URLEncoder.encode("✓", "UTF-8") + "&authenticity_token=" + URLEncoder.encode(Utility.token, "UTF-8")
                + "&item_comment_authenticity_token=" + URLEncoder.encode(Utility.comment_token, "UTF-8") + "&comment=" + URLEncoder.encode(strComment, "UTF-8") + "&commit=" + URLEncoder.encode("コメントする", "UTF-8");

        URL url = new URL(strLink2);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        req.setRequestProperty("Cookie", Utility.cookieID);
        req.setInstanceFollowRedirects(false);
        req.setRequestMethod("POST");
        req.setRequestProperty("Referer", strLink3);
        req.setRequestProperty("Accept", "*/*;q=0.5, text/javascript, application/javascript, application/ecmascript, application/x-ecmascript");
        req.setRequestProperty("X-Requested-With", "XMLHttpRequest");
        req.setRequestProperty("X-CSRF-Token", Utility.token);

        byte[] bytes = formParams.getBytes(StandardCharsets.US_ASCII);
        req.setRequestProperty("Content-Length", String.valueOf(bytes.length));
        //Send POST request
        req.setDoOutput(true);
        try (DataOutputStream wr = new DataOutputStream(req.getOutputStream())) {
            wr.writeBytes(formParams);
            wr.flush();
            wr.close();
        }

        if (req.getInputStream() != null) {
            refreshCommentLstView();
        }
    }

    private static class CommentElement {

        public String commentName = "";
        public String commentDate = "";
        public String commentContent = "";

        public CommentElement(String commentName, String commentDate, String commentContent) {
            this.commentName = commentName;
            this.commentDate = commentDate;
            this.commentContent = commentContent;
        }
    }
}
