/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package fril;

import fril.ListItems.EditInfo;
import java.awt.Image;
import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.AbstractMap;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.net.ssl.HttpsURLConnection;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JScrollPane;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.type.TypeReference;

/**
 *
 * @author CuongPhan
 */
public class AddNewItem extends javax.swing.JFrame {

    private EditInfo editInfo = null;
    private String[] imgPaths = new String[4];
    private String[] imgLinks = new String[4];
    ListItems frmListItems = null;
    List<Category> lstCategory;
    List<Sizes> lstSize;
    private List<String> lstIDImg2Delete = new ArrayList<>();
    private static String token = "";
    private static String cookieID = "";
    private static String authenticationToken = "";
    List<CmbItem> lstCmbItemChild2;
    List<CmbItem> lstStateOfComodity;
    List<CmbItem> lstShippingChangeOfBuden;
    List<CmbItem> lstShippingMethod;
    List<CmbItem> lstEstimatedShippingTime;
    List<CmbItem> lstShippingPlace;
    List<CmbItem> lstPurchaseApplication;
    List<CmbItem> lstCmbSize;

//    public static void main(String[] args ){
//        AddNewItem frmAddNewItem = new AddNewItem();
//        //frmAddNewItem.SetEditedProductInfo(editedInfo);
//        frmAddNewItem.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
//        frmAddNewItem.pack();
//        frmAddNewItem.setVisible(true);  
//    }
    /**
     * Creates new form AddNewItem
     *
     * @throws java.io.IOException
     */
    public AddNewItem() throws IOException {
        initComponents();
        //jScrollPane1 scrollpanel = new JScrollPane();
        ///scrollpanel.
        lstSize = getSizes();
        initializeComboboxes();
        //updateEditedProductInfo();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        lbPicture2 = new javax.swing.JLabel();
        lbPicture3 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        lbPicture4 = new javax.swing.JLabel();
        tfProductPrize = new javax.swing.JTextField();
        btnEdit1 = new javax.swing.JButton();
        jLabel22 = new javax.swing.JLabel();
        btnDelete1 = new javax.swing.JButton();
        btnUpload = new javax.swing.JButton();
        btnEdit2 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        btnDelete2 = new javax.swing.JButton();
        btnEdit3 = new javax.swing.JButton();
        jLabel14 = new javax.swing.JLabel();
        btnDelete3 = new javax.swing.JButton();
        btnEdit4 = new javax.swing.JButton();
        cmbShippingPlace = new javax.swing.JComboBox<>();
        btnDelete4 = new javax.swing.JButton();
        cmbEstimatedDateOfShipment = new javax.swing.JComboBox<>();
        cmbCategoryChild = new javax.swing.JComboBox<>();
        cmbShippingMethod = new javax.swing.JComboBox<>();
        cmbCategoryChild2 = new javax.swing.JComboBox<>();
        cmbShippingChangeOfBuden = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        cmbPurchaseApplication = new javax.swing.JComboBox<>();
        jLabel11 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        tfBrand = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        cmbStateOfComodity = new javax.swing.JComboBox<>();
        cmbSize = new javax.swing.JComboBox<>();
        cmbUserLst = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabelName = new javax.swing.JLabel();
        tfProductName = new javax.swing.JTextField();
        cmbCategories = new javax.swing.JComboBox<>();
        jLabel20 = new javax.swing.JLabel();
        lbPicture1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        taProductDescription = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Add New Item");

        lbPicture2.setText("Picture 2");
        lbPicture2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture2.setName("image2"); // NOI18N
        lbPicture2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture2picture2ClickedHandle(evt);
            }
        });

        lbPicture3.setText("Picture 3");
        lbPicture3.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture3.setName("image3"); // NOI18N
        lbPicture3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture3picture3ClickedHandle(evt);
            }
        });

        jLabel21.setText("Product Prize (*)");

        lbPicture4.setText("Picture 4");
        lbPicture4.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture4.setName("image4"); // NOI18N
        lbPicture4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture4picture4ClickedHandle(evt);
            }
        });

        btnEdit1.setText("Edit");
        btnEdit1.setActionCommand("image1");
        btnEdit1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit1btnEdit_Clicked(evt);
            }
        });

        jLabel22.setText("円");

        btnDelete1.setText("Delete");
        btnDelete1.setActionCommand("image1");
        btnDelete1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete_Clicked(evt);
            }
        });

        btnUpload.setText("Upload");
        btnUpload.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUploadActionPerformed(evt);
            }
        });

        btnEdit2.setText("Edit");
        btnEdit2.setActionCommand("image2");
        btnEdit2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit2btnEdit_Clicked(evt);
            }
        });

        jButton10.setText("Cancel");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10btnCancle_Clicked(evt);
            }
        });

        btnDelete2.setText("Delete");
        btnDelete2.setActionCommand("image2");
        btnDelete2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelete2btnDelete_Clicked(evt);
            }
        });

        btnEdit3.setText("Edit");
        btnEdit3.setActionCommand("image3");
        btnEdit3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit3btnEdit_Clicked(evt);
            }
        });

        jLabel14.setText("Product Images");

        btnDelete3.setText("Delete");
        btnDelete3.setActionCommand("image3");

        btnEdit4.setText("Edit");
        btnEdit4.setActionCommand("image4");
        btnEdit4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEdit4btnEdit_Clicked(evt);
            }
        });

        btnDelete4.setText("Delete");
        btnDelete4.setActionCommand("image4");

        cmbCategoryChild.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryChildcategoryChildSelected(evt);
            }
        });

        cmbCategoryChild2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategoryChild2categoryChild2Selected(evt);
            }
        });

        jLabel1.setText("Purchase Application");

        jLabel9.setText("State of Comodity (*)");

        jLabel11.setText("Size (*)");

        jLabel18.setText("Brand");

        jLabel12.setText("Category (*)");

        tfBrand.setText("指定なし");
        tfBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tfBrandActionPerformed(evt);
            }
        });

        jLabel13.setText("Product Details");

        jLabel10.setText("Merchandise Information");

        cmbUserLst.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbUserLst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbUserLstSelected(evt);
            }
        });

        jLabel2.setText("Account");

        jLabel3.setText("Purchase Aplication");

        jLabel4.setText("Shipping Place (*)");

        jLabel5.setText("Estimate Date of Shipment (*)");

        jLabel6.setText("Shipping Method");

        jLabel7.setText("Shipping change of Buden (*)");

        jLabel8.setText("Shipping information");

        jLabelName.setText("Product Name (*)");

        cmbCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCategorySelected(evt);
            }
        });

        jLabel20.setText("Product Description (*)");

        lbPicture1.setText("Picture 1");
        lbPicture1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        lbPicture1.setName("image1"); // NOI18N
        lbPicture1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                lbPicture1picture1ClickedHandle(evt);
            }
        });

        taProductDescription.setColumns(20);
        taProductDescription.setRows(5);
        jScrollPane1.setViewportView(taProductDescription);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(36, 36, 36)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel4)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel6)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel9)
                                    .addComponent(jLabel18)
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel11, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel1Layout.createSequentialGroup()
                                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                .addComponent(lbPicture1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGroup(jPanel1Layout.createSequentialGroup()
                                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                        .addComponent(jLabel12)
                                                        .addComponent(btnEdit1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addGap(18, 18, 18)
                                                    .addComponent(btnDelete1)))
                                            .addGap(14, 14, 14)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel13))))
                        .addGap(40, 40, 40)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cmbShippingPlace, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbEstimatedDateOfShipment, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbShippingMethod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbShippingChangeOfBuden, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cmbStateOfComodity, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(cmbSize, 0, 198, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnEdit2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete2))
                                    .addComponent(lbPicture2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbCategories, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(btnEdit3, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnDelete3))
                                    .addComponent(lbPicture3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(cmbCategoryChild, javax.swing.GroupLayout.PREFERRED_SIZE, 181, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGap(25, 25, 25)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(lbPicture4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(jPanel1Layout.createSequentialGroup()
                                                .addComponent(btnEdit4, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(18, 18, 18)
                                                .addComponent(btnDelete4)))
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                                        .addComponent(cmbCategoryChild2, javax.swing.GroupLayout.PREFERRED_SIZE, 186, javax.swing.GroupLayout.PREFERRED_SIZE))))
                            .addComponent(tfBrand)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addComponent(jLabel1))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel10))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(38, 38, 38)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel20)
                                    .addComponent(jLabelName)
                                    .addComponent(jLabel21))))
                        .addGap(75, 75, 75)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(tfProductPrize, javax.swing.GroupLayout.DEFAULT_SIZE, 296, Short.MAX_VALUE)
                                    .addComponent(btnUpload, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(jLabel22)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addComponent(jScrollPane1)
                            .addComponent(tfProductName)
                            .addComponent(cmbPurchaseApplication, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbUserLst, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel8))
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbUserLst, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(2, 2, 2)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lbPicture1, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture3, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lbPicture4, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEdit1)
                    .addComponent(btnDelete1)
                    .addComponent(btnEdit2)
                    .addComponent(btnDelete2)
                    .addComponent(btnEdit3)
                    .addComponent(btnDelete3)
                    .addComponent(btnEdit4)
                    .addComponent(btnDelete4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(cmbCategories, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoryChild, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(cmbCategoryChild2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel11))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfBrand, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel18))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(cmbStateOfComodity, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(cmbShippingChangeOfBuden, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(cmbShippingMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(cmbEstimatedDateOfShipment, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(cmbShippingPlace, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(cmbPurchaseApplication, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabelName)
                    .addComponent(tfProductName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel20)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tfProductPrize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel21)
                    .addComponent(jLabel22))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnUpload)
                    .addComponent(jButton10))
                .addContainerGap())
        );

        jScrollPane2.setViewportView(jPanel1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 681, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void lbPicture2picture2ClickedHandle(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture2picture2ClickedHandle
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[1] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture2.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture2picture2ClickedHandle

    private void lbPicture3picture3ClickedHandle(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture3picture3ClickedHandle
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[2] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture3.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture3picture3ClickedHandle

    private void lbPicture4picture4ClickedHandle(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture4picture4ClickedHandle
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[3] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture4.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture4picture4ClickedHandle

    private void btnEdit1btnEdit_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit1btnEdit_Clicked
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit1btnEdit_Clicked

    private void btnDelete_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete_Clicked
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        for (int i = 0; i < 4; i++) {
            if (evt.getActionCommand().equals(label[i].getName())) {
                String strImageID = getImageID(imgLinks[i]);
                if (strImageID != null) {
                    lstIDImg2Delete.add(strImageID);
                    label[i].setIcon(null);
                    imgLinks[i] = null;
                    imgPaths[i] = null;
                }
            }
        }
    }//GEN-LAST:event_btnDelete_Clicked

    private void btnUploadActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUploadActionPerformed
        try {
            uploadItem();
        } catch (IOException ex) {
            Logger.getLogger(AddNewItem.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnUploadActionPerformed

    private void btnEdit2btnEdit_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit2btnEdit_Clicked
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit2btnEdit_Clicked

    private void jButton10btnCancle_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10btnCancle_Clicked
        //close
        this.dispose();
    }//GEN-LAST:event_jButton10btnCancle_Clicked

    private void btnDelete2btnDelete_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelete2btnDelete_Clicked
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        for (int i = 0; i < 4; i++) {
            if (evt.getActionCommand().equals(label[i].getName())) {
                String strImageID = getImageID(imgLinks[i]);
                if (strImageID != null) {
                    lstIDImg2Delete.add(strImageID);
                    label[i].setIcon(null);
                    imgLinks[i] = null;
                    imgPaths[i] = null;
                }
            }
        }
    }//GEN-LAST:event_btnDelete2btnDelete_Clicked

    private void btnEdit3btnEdit_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit3btnEdit_Clicked
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit3btnEdit_Clicked

    private void btnEdit4btnEdit_Clicked(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEdit4btnEdit_Clicked
        // TODO add your handling code here:
        JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            for (int i = 0; i < 4; i++) {
                if (evt.getActionCommand().equals(label[i].getName())) {
                    imgPaths[i] = fileChooser.getSelectedFile().getName();
                    ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
                    //label[i].setIcon(null);
                    label[i].setIcon(imageIcon);
                }
            }
        }
    }//GEN-LAST:event_btnEdit4btnEdit_Clicked

    private void cmbCategoryChildcategoryChildSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryChildcategoryChildSelected
        if (lstCategory != null) {
            int selectedIndex = cmbCategories.getSelectedIndex();
            int childSelectedIndex = cmbCategoryChild.getSelectedIndex();
            if (selectedIndex >= 0 && childSelectedIndex >= 0) {
                cmbCategoryChild2.removeAllItems();
                lstCmbItemChild2 = new ArrayList<>();
                for (Child2 categoryChild2 : lstCategory.get(selectedIndex).children.get(childSelectedIndex).children) {
                    lstCmbItemChild2.add(new CmbItem(categoryChild2.name, "" + categoryChild2.id));
                }
                for (CmbItem item : lstCmbItemChild2) {
                    cmbCategoryChild2.addItem(item.getText());
                }
            }
        }
    }//GEN-LAST:event_cmbCategoryChildcategoryChildSelected

    private void cmbCategoryChild2categoryChild2Selected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategoryChild2categoryChild2Selected
        if (lstCategory != null) {
            int selectedIndex = cmbCategories.getSelectedIndex();
            int childSelectedIndex = cmbCategoryChild.getSelectedIndex();
            int child2SelectedIndex = cmbCategoryChild2.getSelectedIndex();
            if (selectedIndex >= 0 && childSelectedIndex >= 0 && child2SelectedIndex >= 0) {
                List<Object> lstSizes = lstCategory.get(selectedIndex).children.get(childSelectedIndex).children.get(child2SelectedIndex).related_size_group_ids;
                cmbSize.removeAllItems();
                if (lstSizes.isEmpty()) {
                    cmbSize.setEnabled(false);
                } else {
                    cmbSize.setEnabled(true);
                    int nIdxSize = -1;
                    nIdxSize = Integer.valueOf(lstSizes.get(0).toString());

                    lstCmbSize = new ArrayList<>();
                    for (Size size : lstSize.get(nIdxSize - 1).sizes) {
                        lstCmbSize.add(new CmbItem(size.name, String.valueOf(size.id)));
                    }
                    for (CmbItem item : lstCmbSize) {
                        cmbSize.addItem(item.getText());
                    }
                }
            }
        }
    }//GEN-LAST:event_cmbCategoryChild2categoryChild2Selected

    private void tfBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tfBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tfBrandActionPerformed

    private void cmbUserLstSelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbUserLstSelected
        // TODO add your handling code here:
    }//GEN-LAST:event_cmbUserLstSelected

    private void cmbCategorySelected(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCategorySelected
        if (lstCategory != null) {
            int selectedIndex = cmbCategories.getSelectedIndex();
            if (selectedIndex >= 0) {
                cmbCategoryChild.removeAllItems();
                List<CmbItem> lstCmbItem = new ArrayList<CmbItem>();
                for (Child categoryChild : lstCategory.get(selectedIndex).children) {
                    lstCmbItem.add(new CmbItem(categoryChild.name, "" + categoryChild.id));
                }
                for (CmbItem item : lstCmbItem) {
                    cmbCategoryChild.addItem(item.getText());
                }
            }
        }
    }//GEN-LAST:event_cmbCategorySelected

    private void lbPicture1picture1ClickedHandle(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_lbPicture1picture1ClickedHandle
        // TODO add your handling code here:
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter fileFilter
        = new FileNameExtensionFilter("Image files (*.jpg, *.jpeg, *.jpe, *.jfif, *.png)", "jpg", "jpeg", "jpe", "jfif", "png");
        fileChooser.setFileFilter(fileFilter);
        if (fileChooser.showOpenDialog(AddNewItem.this) == JFileChooser.APPROVE_OPTION) {
            imgPaths[0] = fileChooser.getSelectedFile().getName();
            ImageIcon imageIcon = new ImageIcon(((new ImageIcon(fileChooser.getSelectedFile().getPath())).getImage().getScaledInstance(150, 130, Image.SCALE_DEFAULT)));
            lbPicture1.setIcon(imageIcon);
        }
    }//GEN-LAST:event_lbPicture1picture1ClickedHandle

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelete1;
    private javax.swing.JButton btnDelete2;
    private javax.swing.JButton btnDelete3;
    private javax.swing.JButton btnDelete4;
    private javax.swing.JButton btnEdit1;
    private javax.swing.JButton btnEdit2;
    private javax.swing.JButton btnEdit3;
    private javax.swing.JButton btnEdit4;
    private javax.swing.JButton btnUpload;
    private javax.swing.JComboBox<String> cmbCategories;
    private javax.swing.JComboBox<String> cmbCategoryChild;
    private javax.swing.JComboBox<String> cmbCategoryChild2;
    private javax.swing.JComboBox<String> cmbEstimatedDateOfShipment;
    private javax.swing.JComboBox<String> cmbPurchaseApplication;
    private javax.swing.JComboBox<String> cmbShippingChangeOfBuden;
    private javax.swing.JComboBox<String> cmbShippingMethod;
    private javax.swing.JComboBox<String> cmbShippingPlace;
    private javax.swing.JComboBox<String> cmbSize;
    private javax.swing.JComboBox<String> cmbStateOfComodity;
    private javax.swing.JComboBox<String> cmbUserLst;
    private javax.swing.JButton jButton10;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JLabel jLabelName;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel lbPicture1;
    private javax.swing.JLabel lbPicture2;
    private javax.swing.JLabel lbPicture3;
    private javax.swing.JLabel lbPicture4;
    private javax.swing.JTextArea taProductDescription;
    private javax.swing.JTextField tfBrand;
    private javax.swing.JTextField tfProductName;
    private javax.swing.JTextField tfProductPrize;
    // End of variables declaration//GEN-END:variables

    void SetFormListItems(ListItems listItems) {
        frmListItems = listItems;
    }

    void SetEditedProductInfo(EditInfo editedProductInfo) {
        editInfo = editedProductInfo;
    }

    private void initializeComboboxes() throws IOException {
        //TODO
//        String userLst = Settings.userNameLst;
//        StringBuilder sb = new StringBuilder(userLst);
//        sb = sb.deleteCharAt(sb.length()-1);
//        userLst = sb.toString();
//        
//        //get users list
//        List<CmbItem> lstCmbUserItem = new ArrayList<CmbItem>();
//        String[] strUserLst = userLst.split(";");
//        for (String strUserLst1 : strUserLst) {
//            if (strUserLst1.length() > 0) {
//                lstCmbUserItem.add(0, new CmbItem(strUserLst1, strUserLst1));
//            }
//        }
//        //initialize selections for user combobox
//        cmbUserLst.setSelectedItem("Text");
//        for(CmbItem user : lstCmbUserItem){
//            cmbUserLst.addItem(user.toString());
//        }

        //get categories list
        lstCategory = getCategory();
        if (lstCategory != null) {
            cmbCategories.setSelectedItem("Text");
            List<CmbItem> lstCmbItem = new ArrayList<>();
            for (int i = 0; i < lstCategory.size(); i++) {
                lstCmbItem.add(new CmbItem(lstCategory.get(i).name, "" + lstCategory.get(i).id));
            }
            //initialize selections for category combobox
            for (CmbItem item : lstCmbItem) {
                cmbCategories.addItem(item.toString());
            }
        }
        cmbStateOfComodity.setSelectedItem("Text");
        lstStateOfComodity = new ArrayList<>();
        lstStateOfComodity.add(new CmbItem("新品, 未使用", "5"));
        lstStateOfComodity.add(new CmbItem("未使用に近い", "4"));
        lstStateOfComodity.add(new CmbItem("目立った傷や汚れなし", "6"));
        lstStateOfComodity.add(new CmbItem("やや傷や汚れあり", "3"));
        lstStateOfComodity.add(new CmbItem("傷や汚れあり", "2"));
        lstStateOfComodity.add(new CmbItem("全体的に状態が悪い", "1"));
        for (CmbItem stateOfComodity : lstStateOfComodity) {
            cmbStateOfComodity.addItem(stateOfComodity.getText());
        }

        //cmb ShippingChangeOfBuden
        lstShippingChangeOfBuden = new ArrayList<>();
        lstShippingChangeOfBuden.add(new CmbItem("送料込み（出品者が負担)", "1"));
        lstShippingChangeOfBuden.add(new CmbItem("着払い（購入者が負担)", "2"));
        for (CmbItem shippingChangeOfBuden : lstShippingChangeOfBuden) {
            cmbShippingChangeOfBuden.addItem(shippingChangeOfBuden.getText());
        }

        //cmb ShippingMethod
        lstShippingMethod = new ArrayList<>();
        lstShippingMethod.add(new CmbItem("未定", "9"));
        lstShippingMethod.add(new CmbItem("ゆうパック着払い", "8"));
        lstShippingMethod.add(new CmbItem("ヤマト宅急便", "6"));
        lstShippingMethod.add(new CmbItem("ゆうパケット", "17"));
        lstShippingMethod.add(new CmbItem("ゆうメール着払い", "13"));
        for (CmbItem shippingMethod : lstShippingMethod) {
            cmbShippingMethod.addItem(shippingMethod.getText());
        }

        //cmb EstimatedShippingTime
        lstEstimatedShippingTime = new ArrayList<>();
        lstEstimatedShippingTime.add(new CmbItem("支払い後、1～2日で発送", "1"));
        lstEstimatedShippingTime.add(new CmbItem("支払い後、2～3日で発送", "2"));
        lstEstimatedShippingTime.add(new CmbItem("支払い後、4～7日で発送", "3"));
        for (CmbItem estimatedShippingTime : lstEstimatedShippingTime) {
            cmbEstimatedDateOfShipment.addItem(estimatedShippingTime.getText());
        }

        //cmb ShippingPlace
        lstShippingPlace = new ArrayList<>();
        lstShippingPlace.add(new CmbItem("北海道", "1"));
        lstShippingPlace.add(new CmbItem("青森県", "2"));
        lstShippingPlace.add(new CmbItem("岩手県", "3"));
        lstShippingPlace.add(new CmbItem("宮城県", "4"));
        lstShippingPlace.add(new CmbItem("秋田県", "5"));
        lstShippingPlace.add(new CmbItem("山形県", "6"));
        lstShippingPlace.add(new CmbItem("福島県", "7"));
        lstShippingPlace.add(new CmbItem("茨城県", "8"));
        lstShippingPlace.add(new CmbItem("栃木県", "9"));
        lstShippingPlace.add(new CmbItem("群馬県", "10"));
        lstShippingPlace.add(new CmbItem("埼玉県", "11"));
        lstShippingPlace.add(new CmbItem("千葉県", "12"));
        lstShippingPlace.add(new CmbItem("東京都", "13"));
        lstShippingPlace.add(new CmbItem("神奈川県", "14"));
        lstShippingPlace.add(new CmbItem("新潟県", "15"));
        lstShippingPlace.add(new CmbItem("富山県", "16"));
        lstShippingPlace.add(new CmbItem("石川県", "17"));
        lstShippingPlace.add(new CmbItem("福井県", "18"));
        lstShippingPlace.add(new CmbItem("山梨県", "19"));
        lstShippingPlace.add(new CmbItem("長野県", "20"));
        lstShippingPlace.add(new CmbItem("岐阜県", "21"));
        lstShippingPlace.add(new CmbItem("静岡県", "22"));
        lstShippingPlace.add(new CmbItem("愛知県", "23"));
        lstShippingPlace.add(new CmbItem("三重県", "24"));
        lstShippingPlace.add(new CmbItem("滋賀県", "25"));
        lstShippingPlace.add(new CmbItem("大阪府", "27"));
        lstShippingPlace.add(new CmbItem("兵庫県", "28"));
        lstShippingPlace.add(new CmbItem("奈良県", "29"));
        lstShippingPlace.add(new CmbItem("和歌山県", "30"));
        lstShippingPlace.add(new CmbItem("鳥取県", "31"));
        lstShippingPlace.add(new CmbItem("島根県", "32"));
        lstShippingPlace.add(new CmbItem("岡山県", "33"));
        lstShippingPlace.add(new CmbItem("広島県", "34"));
        lstShippingPlace.add(new CmbItem("山口県", "35"));
        lstShippingPlace.add(new CmbItem("徳島県", "36"));
        lstShippingPlace.add(new CmbItem("香川県", "37"));
        lstShippingPlace.add(new CmbItem("愛媛県", "38"));
        lstShippingPlace.add(new CmbItem("高知県", "39"));
        lstShippingPlace.add(new CmbItem("福岡県", "40"));
        lstShippingPlace.add(new CmbItem("佐賀県", "41"));
        lstShippingPlace.add(new CmbItem("長崎県", "42"));
        lstShippingPlace.add(new CmbItem("熊本県", "43"));
        lstShippingPlace.add(new CmbItem("大分県", "44"));
        lstShippingPlace.add(new CmbItem("宮崎県", "45"));
        lstShippingPlace.add(new CmbItem("鹿児島県", "46"));
        lstShippingPlace.add(new CmbItem("沖縄県", "47"));
        for (CmbItem shippingPlace : lstShippingPlace) {
            cmbShippingPlace.addItem(shippingPlace.getText());
        }

        //cmb PurchaseApplication
        lstPurchaseApplication = new ArrayList<>();
        lstPurchaseApplication.add(new CmbItem("なし", "0"));
        lstPurchaseApplication.add(new CmbItem("あり", "1"));
        for (CmbItem purchaseApplication : lstPurchaseApplication) {
            cmbPurchaseApplication.addItem(purchaseApplication.getText());
        }
    }

    public void uploadItem() throws IOException {
        //1. Go to mypage first
        getCookieIdandToken("https://fril.jp/mypage");
        //2. Go to item/new
        getCookieIdandAuthenticationtoken("https://fril.jp/item/new");
        //3. Post to item
        String formUrl;
        List<Map.Entry<String, String>> formData = new ArrayList<>();
        formData.add(new AbstractMap.SimpleEntry<>("utf8", "✓"));
        if (editInfo != null) {
            formData.add(new AbstractMap.SimpleEntry<>("_method", "patch"));
            String strLink = editInfo.strHref;
            String[] strTmp = strLink.split("/");
            formUrl = "https://fril.jp/item/" + strTmp[strTmp.length - 1];
        } else {
            formUrl = "https://fril.jp/item";
        }

        formData.add(new AbstractMap.SimpleEntry<>("authenticity_token", authenticationToken));
        String[] strID = {"", "", "", ""};
        for (int idx = 0; idx < 4; idx++) {
            strID[idx] = getImageID(imgLinks[idx]);
        }

        for (int i = 0; i < 4; i++) {
            formData.add(new AbstractMap.SimpleEntry<>("item_img_ids[] " + i, strID[i]));
            if (editInfo != null) {
                for (int idx = 0; idx < lstIDImg2Delete.size(); idx++) {
                    if (lstIDImg2Delete.get(idx).equals(strID[i])) {
                        formData.remove("item_img_ids[] " + i);
                        formData.add(new AbstractMap.SimpleEntry<>("item_img_ids[] " + i, ""));
                    }
                }
            }

            if (imgPaths[i] != null) {
                formData.add(new AbstractMap.SimpleEntry<>("updates[] " + i, "1"));
                formData.add(new AbstractMap.SimpleEntry<>("set_images[] " + i, "1"));
            } else {
                formData.add(new AbstractMap.SimpleEntry<>("updates[] " + i, ""));
                formData.add(new AbstractMap.SimpleEntry<>("set_images[] " + i, ""));
            }
            formData.add(new AbstractMap.SimpleEntry<>("crop_x[] " + i, ""));
            formData.add(new AbstractMap.SimpleEntry<>("crop_y[] " + i, ""));
            formData.add(new AbstractMap.SimpleEntry<>("crop_size[] " + i, ""));
            formData.add(new AbstractMap.SimpleEntry<>("image_tmp " + i, ""));
        }
//        JList list = new JList(cmbCategoryChild2.getModel());        
//        String value = ((CmbItem)list.getModel().getElementAt(cmbCategoryChild2.getSelectedIndex())).getValue();
        formData.add(new AbstractMap.SimpleEntry<>("item[category_id]", lstCmbItemChild2.get(cmbCategoryChild2.getSelectedIndex()).getValue()));
        if(cmbSize.getSelectedItem() == null){
            formData.add(new AbstractMap.SimpleEntry<>("item[size_id]", ""));
        }
        else{
            formData.add(new AbstractMap.SimpleEntry<>("item[size_id]", lstCmbSize.get(cmbSize.getSelectedIndex()).getValue()));
        }
      
        formData.add(new AbstractMap.SimpleEntry<>("item[brand_id]", ""));
        formData.add(new AbstractMap.SimpleEntry<>("item[status]", lstStateOfComodity.get(cmbStateOfComodity.getSelectedIndex()).getValue()));
        formData.add(new AbstractMap.SimpleEntry<>("item[carriage]", lstShippingChangeOfBuden.get(cmbShippingChangeOfBuden.getSelectedIndex()).getValue()));
        formData.add(new AbstractMap.SimpleEntry<>("item[delivery_method]", lstShippingMethod.get(cmbShippingMethod.getSelectedIndex()).getValue()));
        formData.add(new AbstractMap.SimpleEntry<>("item[delivery_date]", lstEstimatedShippingTime.get(cmbEstimatedDateOfShipment.getSelectedIndex()).getValue()));
        formData.add(new AbstractMap.SimpleEntry<>("item[delivery_area]", lstShippingPlace.get(cmbShippingPlace.getSelectedIndex()).getValue()));

        formData.add(new AbstractMap.SimpleEntry<>("item[request_required]", "0"));
        formData.add(new AbstractMap.SimpleEntry<>("item[name]", tfProductName.getText()));
        formData.add(new AbstractMap.SimpleEntry<>("item[detail]", taProductDescription.getText()));
        formData.add(new AbstractMap.SimpleEntry<>("item[sell_price]", tfProductPrize.getText()));

        if (editInfo != null) {
            for (int i = 0; i < lstIDImg2Delete.size(); i++) {
                formData.add(new AbstractMap.SimpleEntry<>("delete_img_ids[]", lstIDImg2Delete.get(i)));
            }
        }
        String result = uploadFilesToRemoteUrl(formUrl, imgPaths, cookieID, formData);
        if (result.equals("{\"result\":true}")) {
            if (frmListItems != null) {
                frmListItems.refreshListView();
                JOptionPane.showMessageDialog(null, "Upload item successfully");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Upload item failed");
        }
    }

    private String uploadFilesToRemoteUrl(String formUrl, String[] files, String cookieID, List<Map.Entry<String, String>> formData) throws UnsupportedEncodingException, MalformedURLException, IOException {
        Date now = new Date();
        //convert now to hexadecimal
        Calendar cal = Calendar.getInstance();
        //String boundary = "----WebKitFormBoundary" + String.format("%040x", new BigInteger(1, now.toString().getBytes("UTF-16")));
        String boundary = "----WebKitFormBoundary" + Long.toHexString(cal.getTime().getTime());
        
        URL url = new URL(formUrl);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("POST");
        req.setRequestProperty("Content-Type", "multipart/form-data; boundary=" + boundary);
        req.setRequestProperty("Connection", "keep-alive");
        req.setInstanceFollowRedirects(false);
        req.setRequestProperty("Cookie", cookieID);
        req.setRequestProperty("Referer", "https://fril.jp/item/new");
        req.setRequestProperty("Accept", "application/json, text/javascript, */*; q=0.01");
        req.setRequestProperty("X-Requested-With", "XMLHttpRequest");
        
//        for (Map.Entry<String, String> formField : formData){
//            req.setRequestProperty("Content-Disposition: form-data; name=\"" + formField.getKey() + "\"", );
//        }
                
        ByteArrayOutputStream memStream = new ByteArrayOutputStream();
        byte[] boundarybytes = ("\r\n--" + boundary + "\r\n").getBytes(StandardCharsets.US_ASCII);
        byte[] endBoundaryBytes = ("\r\n--" + boundary + "--").getBytes(StandardCharsets.US_ASCII);
        String formdataTemplate = "\r\n--" + boundary + "\r\nContent-Disposition: form-data; name=\"%s\";\r\n\r\n%s";
        if (formData != null) {
            for (Map.Entry<String, String> formField : formData) {
                String formitem;
                String[] tmp = formField.getKey().split(" ");
                String key = tmp[0];
                if ("image_tmp".equals(key)) {
                    formitem = "\r\n--" + boundary + "\r\nContent-Disposition: form-data; name=\"" + key + "\"; filename=\"\"\r\n" + "Content-Type: application/octet-stream\r\n\r\n";
                } else {
                    formitem = String.format(formdataTemplate, key, formField.getValue());
                }
                byte[] formitembytes = formitem.getBytes("UTF-8");
                memStream.write(formitembytes, 0, formitembytes.length);
            }
        }

        String headerTemplate = "Content-Disposition: form-data; name=\"%s\"; filename=\"%s\"\r\n"
                + "Content-Type: image/jpeg\r\n\r\n";
        for (String file : files) {
            if (file != null) {
                memStream.write(boundarybytes, 0, boundarybytes.length);
                String header = String.format(headerTemplate, "images[]", file);
                byte[] headerbytes = header.getBytes("UTF-8");

                memStream.write(headerbytes, 0, headerbytes.length);
                //TODO change to appropriate with every computer
                String path = "C:\\Users\\Admin\\Pictures\\" + file;
                FileInputStream fileStream = new FileInputStream(path);
                byte[] buffer = new byte[1024];
                int bytesRead;
                while ((bytesRead = fileStream.read(buffer, 0, buffer.length)) != -1) {
                    memStream.write(buffer, 0, bytesRead);
                }
            }
        }
        
        memStream.write(endBoundaryBytes, 0, endBoundaryBytes.length);
        req.setRequestProperty("Content-Length", String.valueOf(memStream.size()));
        req.setDoOutput(true);
        try (DataOutputStream wr = new DataOutputStream(req.getOutputStream())) {
            byte[] tempBuffer = new byte[memStream.size()];
            ByteArrayInputStream memStreamRead = new ByteArrayInputStream(tempBuffer, 0, tempBuffer.length);
            memStreamRead.close();
            wr.write(tempBuffer, 0, tempBuffer.length);
            wr.flush();
            wr.close();
        }
        
        StringBuilder stringBuilder = new StringBuilder();
        String inputLine;
        String resp;
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        resp = stringBuilder.toString();
        return resp;
    }

    public void updateEditedProductInfo() throws MalformedURLException, IOException {
        if (editInfo != null) {
            JLabel[] label = new JLabel[]{lbPicture1, lbPicture2, lbPicture3, lbPicture4};
            int index = 0;
            for (String imgPath : editInfo.imageLinkList) {
                imgLinks[index] = imgPath;
                URL url = new URL(imgPath);
                Image image = ImageIO.read(url);
                ImageIcon imageIcon = new ImageIcon(image);
                label[index++].setIcon(imageIcon);
//                ImageIcon image = new ImageIcon(imgPath);
//                label[index++].setIcon(image);
            }
            String debugString = "";
            //find categoryID
            for (int i = 0; i < lstCategory.size(); i++) {
                if (lstCategory.get(i).id == editInfo.editItemInfo.category_id) {
                    debugString = "category: " + i + " " + lstCategory.get(i).name;
                }
                for (int j = 0; j < lstCategory.get(i).children.size(); j++) {
                    if (lstCategory.get(i).children.get(j).id == editInfo.editItemInfo.category_id) {
                        debugString += " category - child: " + j + " " + lstCategory.get(i).name;
                    }
                    for (int k = 0; k < lstCategory.get(i).children.get(j).children.size(); k++) {
                        if (lstCategory.get(i).children.get(j).children.get(k).id == editInfo.editItemInfo.category_id) {
                            debugString += " category - child2: " + k + " " + lstCategory.get(i).name;
                            cmbCategories.setSelectedIndex(i);
                            cmbCategoryChild.setSelectedIndex(j);
                            cmbCategoryChild2.setSelectedIndex(k);
                            break;
                        }
                    }
                }
            }
            for(int i = 0; i < lstCmbSize.size(); i++){
                if(lstCmbSize.get(i).Value.equals(editInfo.editItemInfo.size_id)){
                    cmbSize.setSelectedIndex(i);
                }
            }
            tfBrand.setText(editInfo.editItemInfo.brand_name);
            for(int i = 0; i < lstStateOfComodity.size(); i++){
                if(Integer.parseInt(lstStateOfComodity.get(i).Value) == (editInfo.editItemInfo.status)){
                    cmbStateOfComodity.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstShippingChangeOfBuden.size(); i++){
                if(Integer.parseInt(lstShippingChangeOfBuden.get(i).Value) == (editInfo.editItemInfo.carriage)){
                    cmbShippingChangeOfBuden.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstShippingMethod.size(); i++){
                if(Integer.parseInt(lstShippingMethod.get(i).Value) == (editInfo.editItemInfo.delivery_method)){
                    cmbShippingMethod.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstShippingPlace.size(); i++){
                if(Integer.parseInt(lstShippingPlace.get(i).Value) == (editInfo.editItemInfo.delivery_area)){
                    cmbShippingPlace.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstEstimatedShippingTime.size(); i++){
                if(Integer.parseInt(lstEstimatedShippingTime.get(i).Value) == (editInfo.editItemInfo.delivery_date)){
                    cmbEstimatedDateOfShipment.setSelectedIndex(i);
                }
            }
            for(int i = 0; i < lstPurchaseApplication.size(); i++){
                if(lstPurchaseApplication.get(i).Value.equals(editInfo.editItemInfo.request_required)){
                    cmbPurchaseApplication.setSelectedIndex(i);
                }
            }
            cmbPurchaseApplication.setSelectedItem(editInfo.editItemInfo.request_required);
            tfProductName.setText(editInfo.editItemInfo.name);
            taProductDescription.setText(editInfo.editItemInfo.detail);
            tfProductPrize.setText(String.valueOf(editInfo.editItemInfo.sell_price));
        }
    }

    public static void getCookieIdandToken(String formUrl) throws MalformedURLException, IOException {
        StringBuilder stringBuilder = new StringBuilder();
        String inputLine;
        String resp;
        //http request
        URL url = new URL(formUrl);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("GET");
        req.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        req.setRequestProperty("Cookie", Utility.gCookieID);
        req.setRequestProperty("User-Agent", "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/60.0.3112.90 Safari/537.36");
        req.setRequestProperty("Accept", "text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8");
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        resp = stringBuilder.toString();
        String cookie = req.getHeaderField("Set-Cookie");
        String[] cookieSplit = cookie.split(";"); //splits cookie by ; (example: asd=afsdf;domain=...)
        String[] cookies = cookieSplit[0].split("="); //example: splits asd=afsdf by =
        cookieID = "_fril_user_session=" + cookies[1]; //get cookie value

        int nIdxStart = resp.indexOf("csrf-token");
        int nIdxEnd = resp.indexOf("/>", nIdxStart);
        String strTmp = resp.substring(nIdxStart, nIdxEnd); 
        String[] tmp = strTmp.split("\\\"");
        if (tmp.length >= 3) {
            token = tmp[2]; //get token
        }
    }

    public static void getCookieIdandAuthenticationtoken(String formUrl) throws MalformedURLException, IOException {
        StringBuilder stringBuilder = new StringBuilder();
        String inputLine;
        String resp;
        //http request
        URL url = new URL(formUrl);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("GET");
        req.setRequestProperty("Content-Type", "application/x-www-form-urlencoded");
        req.setRequestProperty("Cookie", cookieID);
        req.setRequestProperty("Referer", "Referer: https://fril.jp/mypage");
        
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        resp = stringBuilder.toString();
        String cookie = req.getHeaderField("Set-Cookie");
        String[] cookieSplit = cookie.split(";"); //splits cookie by ; (example: asd=afsdf;domain=...)
        String[] cookies = cookieSplit[0].split("="); //example: splits asd=afsdf by =
        cookieID = "_fril_user_session=" + cookies[1]; //get cookie value

        int nIdxStart = resp.indexOf("csrf-token");
        int nIdxEnd = resp.indexOf("/>", nIdxStart);
        String strTmp = resp.substring(nIdxStart, nIdxEnd);
        String[] tmp = strTmp.split("\\\"");
        if (tmp.length >= 3) {
            authenticationToken = tmp[2]; //get authentication token
        }
    }

    private List<Sizes> getSizes() throws MalformedURLException, IOException {
        List<ItemShortInfo> lstItem = new ArrayList<>();
        String frmUrl = "https://fril.jp/ajax/size";
        URL url = new URL(frmUrl);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("GET");
        req.setRequestProperty("Content-Type", "text/javascript; charset=utf-8");
        req.setRequestProperty("X-Requested-With", "XMLHttpRequest");

        String fullPage;
        String inputLine;
        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        fullPage = stringBuilder.toString();
        ObjectMapper mapper = new ObjectMapper();
        List<Sizes> lstSizes = mapper.readValue(fullPage, new TypeReference<List<Sizes>>() {
        });
        //the 2nd way to create get mapper.readValue();
        //List<Sizes> lstSizes = Arrays.asList(mapper.readValue(fullPage, Sizes.class)); 
        return lstSizes;
    }

    public static List<Category> getCategory() throws MalformedURLException, IOException {
        String frmUrl = "https://fril.jp/ajax/category";
        URL url = new URL(frmUrl);
        HttpsURLConnection req = (HttpsURLConnection) url.openConnection();
        req.setRequestMethod("GET");
        req.setRequestProperty("Content-Type", "text/javascript; charset=utf-8");
        req.setRequestProperty("X-Requested-With", "XMLHttpRequest");
        req.setRequestProperty("Cookie", Utility.gCookieID);

        String fullPage;
        String inputLine;
        StringBuilder stringBuilder = new StringBuilder();
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(req.getInputStream()));
        while ((inputLine = bufferedReader.readLine()) != null) {
            stringBuilder.append(inputLine);
        }
        fullPage = stringBuilder.toString();
        ObjectMapper mapper = new ObjectMapper();
        List<Category> category = mapper.readValue(fullPage, new TypeReference<List<Category>>() {
        });
        //List<Category> category = Arrays.asList(mapper.readValue(fullPage, Category.class));
        //the 2nd way to create get mapper.readValue();
        //List<Sizes> lstSizes = Arrays.asList(mapper.readValue(fullPage, Sizes.class)); 
        return category;
    }

    private String getImageID(String imgLink) {
        String strIdImg = "";
        if (imgLink != null && imgLink.contains("/original/")) {
            String strImagePath = Utility.extractAttribute(imgLink, 0, "/original/", ".");
            strIdImg = strImagePath;
        }
        return strIdImg;
    }

    public static class Child2 {

        public int id;
        public int parent_id;
        public String name;
        public String kana_name;
        public String description;
        public String sub_description;
        public String seo_name;
        public String seo_nickname;
        public int sort;
        public int size_group_id;
        public int open_flag;
        public List<Object> related_size_group_ids;
        public List<Object> children;

        public Child2() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getParent_id() {
            return parent_id;
        }

        public void setParent_id(int parent_id) {
            this.parent_id = parent_id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getKana_name() {
            return kana_name;
        }

        public void setKana_name(String kana_name) {
            this.kana_name = kana_name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String getSub_description() {
            return sub_description;
        }

        public void setSub_description(String sub_description) {
            this.sub_description = sub_description;
        }

        public String getSeo_name() {
            return seo_name;
        }

        public void setSeo_name(String seo_name) {
            this.seo_name = seo_name;
        }

        public String getSeo_nickname() {
            return seo_nickname;
        }

        public void setSeo_nickname(String seo_nickname) {
            this.seo_nickname = seo_nickname;
        }

        public int getSort() {
            return sort;
        }

        public void setSort(int sort) {
            this.sort = sort;
        }

        public int getSize_group_id() {
            return size_group_id;
        }

        public void setSize_group_id(int size_group_id) {
            this.size_group_id = size_group_id;
        }

        public int getOpen_flag() {
            return open_flag;
        }

        public void setOpen_flag(int open_flag) {
            this.open_flag = open_flag;
        }

        public List<Object> getRelated_size_group_ids() {
            return related_size_group_ids;
        }

        public void setRelated_size_group_ids(List<Object> related_size_group_ids) {
            this.related_size_group_ids = related_size_group_ids;
        }

        public List<Object> getChildren() {
            return children;
        }

        public void setChildren(List<Object> children) {
            this.children = children;
        }

    }

    public static class Child {

        public int id;
        public int parent_id;
        public String name;
        public String kana_name;
        public String description;
        public String sub_description;
        public String seo_name;
        public String seo_nickname;
        public int sort;
        public Object size_group_id;
        public int open_flag;
        public List<Object> related_size_group_ids;
        public List<Child2> children;

        public Child() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getParent_id() {
            return parent_id;
        }

        public void setParent_id(int parent_id) {
            this.parent_id = parent_id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getKana_name() {
            return kana_name;
        }

        public void setKana_name(String kana_name) {
            this.kana_name = kana_name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String getSub_description() {
            return sub_description;
        }

        public void setSub_description(String sub_description) {
            this.sub_description = sub_description;
        }

        public String getSeo_name() {
            return seo_name;
        }

        public void setSeo_name(String seo_name) {
            this.seo_name = seo_name;
        }

        public String getSeo_nickname() {
            return seo_nickname;
        }

        public void setSeo_nickname(String seo_nickname) {
            this.seo_nickname = seo_nickname;
        }

        public int getSort() {
            return sort;
        }

        public void setSort(int sort) {
            this.sort = sort;
        }

        public Object getSize_group_id() {
            return size_group_id;
        }

        public void setSize_group_id(Object size_group_id) {
            this.size_group_id = size_group_id;
        }

        public int getOpen_flag() {
            return open_flag;
        }

        public void setOpen_flag(int open_flag) {
            this.open_flag = open_flag;
        }

        public List<Object> getRelated_size_group_ids() {
            return related_size_group_ids;
        }

        public void setRelated_size_group_ids(List<Object> related_size_group_ids) {
            this.related_size_group_ids = related_size_group_ids;
        }

        public List<Child2> getChildren() {
            return children;
        }

        public void setChildren(List<Child2> children) {
            this.children = children;
        }

    }

    public static class Category {

        public int id;
        public int parent_id;
        public String name;
        public String kana_name;
        public String description;
        public String sub_description;
        public String seo_name;
        public String seo_nickname;
        public int sort;
        public int size_group_id;
        public int open_flag;
        public List<Object> related_size_group_ids;
        public List<Child> children;

        public Category() {
        }

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getParent_id() {
            return parent_id;
        }

        public void setParent_id(int parent_id) {
            this.parent_id = parent_id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public String getKana_name() {
            return kana_name;
        }

        public void setKana_name(String kana_name) {
            this.kana_name = kana_name;
        }

        public String getDescription() {
            return description;
        }

        public void setDescription(String description) {
            this.description = description;
        }

        public String getSub_description() {
            return sub_description;
        }

        public void setSub_description(String sub_description) {
            this.sub_description = sub_description;
        }

        public String getSeo_name() {
            return seo_name;
        }

        public void setSeo_name(String seo_name) {
            this.seo_name = seo_name;
        }

        public String getSeo_nickname() {
            return seo_nickname;
        }

        public void setSeo_nickname(String seo_nickname) {
            this.seo_nickname = seo_nickname;
        }

        public int getSort() {
            return sort;
        }

        public void setSort(int sort) {
            this.sort = sort;
        }

        public int getSize_group_id() {
            return size_group_id;
        }

        public void setSize_group_id(int size_group_id) {
            this.size_group_id = size_group_id;
        }

        public int getOpen_flag() {
            return open_flag;
        }

        public void setOpen_flag(int open_flag) {
            this.open_flag = open_flag;
        }

        public List<Object> getRelated_size_group_ids() {
            return related_size_group_ids;
        }

        public void setRelated_size_group_ids(List<Object> related_size_group_ids) {
            this.related_size_group_ids = related_size_group_ids;
        }

        public List<Child> getChildren() {
            return children;
        }

        public void setChildren(List<Child> children) {
            this.children = children;
        }

    }

    public static class Sizes {

        public int id;
        public String name;
        public List<Size> sizes;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public List<Size> getSizes() {
            return sizes;
        }

        public void setSizes(List<Size> sizes) {
            this.sizes = sizes;
        }

    }

    public static class Size {

        public int id;
        public int category_id;
        public String name;
        public int open_flag;
        public int user_custom_flag;
        public String created_at;
        public String updated_at;

        public int getId() {
            return id;
        }

        public void setId(int id) {
            this.id = id;
        }

        public int getCategory_id() {
            return category_id;
        }

        public void setCategory_id(int category_id) {
            this.category_id = category_id;
        }

        public String getName() {
            return name;
        }

        public void setName(String name) {
            this.name = name;
        }

        public int getOpen_flag() {
            return open_flag;
        }

        public void setOpen_flag(int open_flag) {
            this.open_flag = open_flag;
        }

        public int getUser_custom_flag() {
            return user_custom_flag;
        }

        public void setUser_custom_flag(int user_custom_flag) {
            this.user_custom_flag = user_custom_flag;
        }

        public String getCreated_at() {
            return created_at;
        }

        public void setCreated_at(String created_at) {
            this.created_at = created_at;
        }

        public String getUpdated_at() {
            return updated_at;
        }

        public void setUpdated_at(String updated_at) {
            this.updated_at = updated_at;
        }

    }

    public static class CmbItem {

        public String Value;
        public String Text;

        public String getValue() {
            return Value;
        }

        public void setValue(String Value) {
            this.Value = Value;
        }

        public String getText() {
            return Text;
        }

        public void setText(String Text) {
            this.Text = Text;
        }

        public CmbItem(String Text, String Value) {
            this.Value = Value;
            this.Text = Text;
        }

        @Override
        public String toString() {
            return Text;
        }
    }
}
